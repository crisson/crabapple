{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app.js","node_modules/@crabapple/Homepage.jsx","node_modules/@crabapple/components/Board.jsx","node_modules/@crabapple/components/Body.jsx","node_modules/@crabapple/components/Cell.jsx","node_modules/@crabapple/components/Deck.jsx","node_modules/@crabapple/components/Spinner.jsx","node_modules/@crabapple/service/index.js"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import reactTapEventPlugin from 'react-tap-event-plugin'\n\nimport React from 'react'\n\nreactTapEventPlugin()\n\nimport Homepage from '@crabapple/Homepage.jsx'\n\nReact.render(<Homepage />, document.querySelector('#app'))","import React from 'react';\nimport {AppCanvas, AppBar, FlatButton, FontIcon} from 'material-ui'\n\nimport Body from '@crabapple/components/Body.jsx'\nimport Spinner from '@crabapple/components/Spinner.jsx'\n\nimport Crabapple from '@crabapple/service'\n\nexport default React.createClass({\n\n    displayName: 'App',\n\n    getInitialState() {\n        return {};\n    },\n\n    componentDidMount(){\n        let gs = Crabapple.getOrCreateGame()\n        gs.onValue(gameState => this.setState({gameState}))\n    },\n\n    render() {\n        let {gameState} = this.state\n\n        let githubIcon = (\n            <FlatButton className=\"github-icon-button\" linkButton={true} href=\"https://github.com/crisson/scrabble\" secondary={true}>\n              <FontIcon className=\"muidocs-icon-custom-github\"/>\n              <span className=\"mui-flat-button-label\">Github</span>\n            </FlatButton>\n        )\n\n        var content = (<Spinner />)\n        if (gameState) {\n            content = <Body gameState={gameState}/>\n        }\n\n        return (\n            <div>\n                { /* <AppBar title=\"Crabapple Time\" iconElementRight={githubIcon}/> */ }\n                <AppCanvas className=\"wrapper\">\n                    {content}\n                </AppCanvas>\n                \n            </div>\n        );\n    }\n\n});","import lodash from 'lodash'\n\nimport React from 'react';\nimport BaconMixin from 'react-bacon'\n\nimport {Paper} from 'material-ui'\nimport {DragDropMixin} from 'react-dnd'\n\nimport Cell from './Cell.jsx'\n\nimport Crabapple from '@crabapple/service'\n\nconst itemDropTarget = {\n  acceptDrop(component, item) {\n    return null\n  }\n};\n\n/**\n * Key used to register this component type as a drag n' drop item\n * @type {String}\n */\nconst DND_TILE = 'tile'\n\nexport default React.createClass({\n\n    displayName: 'Board',\n\n    mixins: [BaconMixin, DragDropMixin],\n\n    propTypes:{\n        board: React.PropTypes.array\n    },\n\n    getInitialState() {\n        return {\n            workingSet: Crabapple.getEmptyBoard()\n        };\n    },\n\n    statics: {\n      configureDragDrop(register) {\n        register(DND_TILE, {\n          dropTarget: itemDropTarget\n        });\n      }\n    },\n\n    words: new Set(),\n\n    componentDidMount(){\n        let bus = Crabapple.retrieve()\n\n        bus.onValue(words => {\n            this.words = words\n        })\n\n        bus.onError((error) => {\n            this.setState({error: error.message})\n        })\n\n    },\n\n    makeCells(isDragging, isHovering){\n        return this.props.board.map((row, y) => {\n            return row.map((cellData, x) => {\n                let key = `(${y},${x})`\n                // let value = letters[lodash.random(letters.length - 1)]\n                let ws = this.state.workingSet[y][x]\n                var cd = cellData\n                if (ws) {\n                    cd = lodash.assign({}, cellData, ws)\n                }\n                var cell = (\n                    <Cell key={key} \n                        x={x} \n                        y={y} \n                        data={cd} \n                        isDragging={isDragging}\n                        isHovering={isHovering}\n                        onDrop={this.onDrop} />\n                )\n                return cell;\n            })\n        })\n    },\n\n    onDrop(item, y, x){\n        let {workingSet} = this.state\n        let {letter, points} = item\n        workingSet[y][x] = {tile: {letter, points}}\n        this.setState({workingSet})\n    },\n\n    render() {\n\n        const dropState = this.getDropState(DND_TILE);\n\n        // let cells = []\n        let cells = this.makeCells(dropState.isDragging, dropState.isHovering)\n        return (\n            <Paper className=\"board\" zDepth={1} \n                {...this.dropTargetFor(DND_TILE)}>\n                {cells}\n            </Paper>\n        );\n    }\n\n});","import React from 'react';\nimport BaconMixin from 'react-bacon'\n\nimport Deck from './Deck.jsx'\nimport Board from './Board.jsx'\n\nexport default React.createClass({\n\n    displayName: 'Body',\n\n    Mixins: [BaconMixin],\n\n    propTypes: {\n        gameState: React.PropTypes.object.isRequired\n    },\n\n    render() {\n        let {board, playerInfo} = this.props.gameState\n        return (\n            <div className=\"content\">\n                <div className=\"top-content\">\n                    <Deck players={playerInfo}/>\n                </div>\n                <div className=\"center-content\">\n                    <div className=\"center-content-section center-content-middle\">\n                        <Board board={board}/>\n                    </div>\n                </div>\n                <div className=\"bottom-content\"></div>\n            </div>\n        );\n    }\n\n});","import lodash from 'lodash'\n\nimport React from 'react';\nimport {DragDropMixin} from 'react-dnd'\n\nimport {Paper, Mixins} from 'material-ui'\n\n/**\n * Key used to register this component type as a drag n' drop item\n * @type {String}\n */\nconst DND_TILE = 'tile'\n\n\nconst itemDropTarget = {\n  getDropEffect(cell, effectsAllowed){\n    if (!cell.isDroppable()) return 'other'\n    return effectsAllowed[0]\n  },\n\n  acceptDrop(cell, item, isHandled, effect) {\n    if (!cell.isDroppable()) return effect;\n    cell.onDrop(item)\n  }\n};\n\n\n\nexport default React.createClass({\n\n    displayName: 'Cell',\n\n    mixins: [Mixins.Classable, DragDropMixin],\n\n    statics: {\n      configureDragDrop(register) {\n        register(DND_TILE, {\n          dropTarget: itemDropTarget\n        });\n      }\n    },\n\n    getDefaultProps() {\n        return {\n            isDragging: false,\n            isHovering: false\n        };\n    },\n\n    getInitialState() {\n        return {};\n    },\n\n    propTypes: {\n        x: React.PropTypes.number.isRequired,\n        y: React.PropTypes.number.isRequired,\n        data: React.PropTypes.object,\n        isDragging: React.PropTypes.bool,\n        isHovering: React.PropTypes.bool,\n        onDrop: React.PropTypes.func\n    },\n\n    isDroppable(){\n        return !this.props.data.tile\n    },\n\n    chooseColor(){\n\n    },\n\n    onDrop(item){\n        this.props.onDrop(item, this.props.y, this.props.x)\n    },\n\n    render() {\n        let {data, isDragging, isHovering} = this.props\n\n        const dropState = this.getDropState(DND_TILE);\n\n        let contentClasses = this.getClasses('cell-content', {\n            'is-special': data.isSpecial,\n            'special-tl': data.key === 'tl',\n            'special-tw': data.key === 'tw',\n            'special-dl': data.key === 'dl',\n            'special-dw': data.key === 'dw',\n            'is-empty': !data.tile,\n            'tile-set': data.tile /*  Why are you doing this??? */\n        })\n\n        let cellClasses = this.getClasses('cell', {\n            'is-empty': !data.tile,\n            'is-not-drag-target': isDragging && data.tile,\n            'is-drop-target': dropState.isHovering && !data.tile,\n            'is-special': data.isSpecial\n        })\n\n        var body = (<div>&nbsp;</div>)\n        if (data.tile || data.isSpecial) {\n            var pointsDisplay;\n            var letterDisplay;\n            if (data.tile && data.isSpecial) {\n                letterDisplay = data.tile.letter\n                pointsDisplay = `${data.tile.points} x ${data.multiple}`\n            } else if (data.isSpecial) {\n                pointsDisplay = `x ${data.multiple}`\n            } else {\n                letterDisplay = data.tile.letter\n                pointsDisplay = data.tile.points\n            }\n\n            body = (\n                <Paper zDepth={1}>\n                    <div className=\"cell-letter\">{letterDisplay}</div>\n                    <div className=\"cell-points\">{pointsDisplay}</div>\n                </Paper>\n            )\n        }\n\n        return (\n            <div className={cellClasses} {...this.dropTargetFor(DND_TILE)}>\n                <span className={contentClasses} >\n                    {body}\n                </span>\n            </div>\n        );\n    }\n\n});","import lodash from 'lodash'\n\nimport React from 'react';\nimport {DragDropMixin} from 'react-dnd'\n\nimport {Paper, Mixins, FlatButton} from 'material-ui'\n\nimport Crabapple from '@crabapple/service'\n\n\nconst PlayerData = React.createClass({\n    propTypes: {\n        data: React.PropTypes.object.isRequired,\n        color: React.PropTypes.string.isRequired\n    },\n\n    displayName: 'PlayerData',\n\n    render(){\n        let {data, color} = this.props\n        let {displayName, points} = data\n\n        let style = {color: color}\n\n        return (\n            <div className=\"player-data\">    \n                <span className=\"player-name\" style={style}>{displayName}</span>\n                <span className=\"player-points\">{points}</span>\n            </div>\n        )\n    }\n})\n\nconst PlayerList = React.createClass({\n    propTypes: {\n        players: React.PropTypes.arrayOf(React.PropTypes.object)\n    },\n\n    displayName: 'PlayerList',\n\n    colors: [\n        'red',\n        'orange',\n        'blue',\n        'brown'\n    ],\n\n    chooseColor(index){\n        return this.colors[index]\n    },\n\n    render(){\n\n        let players = this.props.players.map((pd, idx) => {\n            let key = `{$pd.displayName}-${lodash.uniqueId()}`\n            let color = this.chooseColor(idx)\n            return (<PlayerData key={key} data={pd} color={color}/>)\n        })\n\n        return (\n            <div className=\"player-lst\">\n                {players}\n            </div>\n        )\n    }\n})\n\n\n/**\n * Key used to register this component type as a drag n' drop item\n * @type {String}\n */\nconst DND_TILE = 'tile'\n\nconst itemDragSource = {\n  beginDrag(component) {\n\n    return {\n      item: {\n        points: component.props.points,\n        letter: component.props.letter\n      },\n      effectsAllowed: ['move', 'other']\n    };\n  },\n  canDrag(component){\n    if (component.state.inWorkingSet) return false\n    return true\n  },\n  endDrag(component, dropEffect){\n    if ('other' === dropEffect) return;\n    component.setInWorkingSet()\n  }\n};\n\n/**\n * A tile\n */\n\nconst Tile = React.createClass({\n\n    mixins: [DragDropMixin, Mixins.Classable],\n\n    displayName: 'Tile',\n\n    propTypes: {\n        points: React.PropTypes.number.isRequired,\n        letter: React.PropTypes.string.isRequired,\n    },\n\n    statics: {\n      configureDragDrop(register) {\n        register(DND_TILE, {\n          dragSource: itemDragSource\n        });\n      }\n    },\n\n    getInitialState() {\n        return {\n            inWorkingSet: false\n        };\n    },\n\n\n    setInWorkingSet(){\n        this.setState({inWorkingSet: true})\n    },\n\n    render(){\n        let {letter, points} = this.props\n        let {inWorkingSet} = this.state\n        const { isDragging } = this.getDragState(DND_TILE);\n\n        let opacity = isDragging? 0.2 : 1\n        if (inWorkingSet) {\n            opacity = 0.2\n        }\n\n        let style = {opacity}\n\n        let paperClasses = this.getClasses('tile', {\n            'is-in-working-set': inWorkingSet\n        })\n\n        return (\n            <div className=\"title-cnt\" \n                {...this.dragSourceFor(DND_TILE)} \n                style={style} >\n\n                <Paper className={paperClasses} zDepth={1}>\n                    <span className=\"tile-letter\">{letter}</span>\n                    <span className=\"tile-points\">{points}</span>\n                </Paper>\n            </div>\n        )\n    }\n})\n\nconst TileList = React.createClass({\n\n    displayName: 'TileList',\n\n    propTypes: {\n        tiles: React.PropTypes.array.isRequired\n    },\n\n    generateTiles(){\n        return this.props.tiles.map(t => {\n            let [letter, points] = t\n            return (\n                <Tile \n                    key={lodash.uniqueId()} \n                    letter={letter} \n                    points={points}/>\n            )\n        })\n    },\n\n    render(){\n\n        let tiles = this.generateTiles()\n\n        return (\n            <div className=\"tile-lst\">\n                <div className=\"tile-lst-content\">\n                    {tiles}\n                </div>\n            </div>\n        )\n    }\n})\n\nexport default React.createClass({\n\n    displayName: 'Deck',\n\n    mixins: [Mixins.Classable],\n\n    getDefaultProps() {\n        return {\n        };\n    },\n\n    getInitialState() {\n        return {\n            checkButtonDisabled:  false\n        };\n    },\n\n    propTypes: {\n        players: React.PropTypes.arrayOf(React.PropTypes.object).isRequired\n    },\n\n    handleCheckWord(){\n\n    },\n\n    render() {\n        let {players} = this.props\n        let {checkButtonDisabled} = this.state\n        let classNames = this.getClasses('deck', {})\n        let humanPlayerInfo = lodash.find(players, 'isHuman')\n\n        return (\n            <span className={classNames}>\n                <PlayerList players={players}/>\n                <TileList tiles={humanPlayerInfo.deck}/>\n                <FlatButton label=\"Check Words\" primary={true} disabled={checkButtonDisabled}/>\n            </span>\n        );\n    }\n\n});","import React from 'react';\n\nexport default React.createClass({\n\n    displayName: 'Spinner',\n\n    render() {\n        return (\n            <div className=\"content content-spinner\"></div>\n        );\n    }\n\n});","import lodash from 'lodash'\nimport request from 'superagent'\nimport Bacon from 'baconjs'\nimport localforage from 'localforage'\n\nconst DEFAULT_FILE = 'data/words.txt'\n\nconst WORD_LIST_KEY = 'wordList'\n\nconst GAME_STATE_KEY = \"gameState\"\n\n/**\n * A promise \n * @volatile\n */\nvar gameStatePromise;\n\n\nconst getFromStorage = () => {\n    return localforage.getItem(WORD_LIST_KEY)\n}\n\nconst alphabet = lodash.toArray('abcdefghijklmnopqrstuvwxyz')\n\n\n/**\n * Maximum base value for a letter\n * @type {Number}\n */\nconst MAX_ALPHA_VALUE = 20\n\n\n/**\n * Maximum size of the player's deck\n * @type {Nat}\n */\nconst DECK_SIZE = 8\n\n/**\n * Size of the board\n * @type {Number}\n */\nconst BOARD_SIZE = 15\n\n/**\n * Game values assigned to letters of the alphabet\n * @type {Map}\n * @key {Char} uppercase letter\n * @value {Nat} point value for uppercase letter\n * \n * @return {[type]}        [description]\n */\nconst AlphabetValues = alphabet.reduce((map, l) => {\n    map.set(l, lodash.random(1, MAX_ALPHA_VALUE))\n    return map\n}, new Map())\n\n\n/**\n * Tuple of uppercase alphabet letter and its point value\n * @type {Tuple.<Char, Nat>}\n */\nvar AlphabetEntries = []\n\nfor (let val of AlphabetValues.entries()) {\n    AlphabetEntries.push(val);\n} \n\n/**\n * Maximum number of available non-blank tiles for a game\n * @type {Number}\n */\nconst AVAILABLE_TILES = 98\n\n/**\n * All tiles available for a game\n * \n * @type {Array.<Tuple.<Char, Nat>>}\n */\nvar GameTiles = lodash.range(AVAILABLE_TILES).map(() => {\n    return lodash.sample(AlphabetEntries)\n})\n\n/**\n * Key for double-word bonus\n * @type {String}\n */\nconst DOUBLE_WORD_KEY = 'dw'\n\n/**\n * Array of Tuples of bonus cells and their multiples\n * @type {Array.<Triple.<String, Nat, Nat>>}\n */\nconst Bonuses = [\n    ['dl', 2, 24],\n    ['tl', 3, 12],\n    /* \n        We subtract one to account for the center cell bonus accounted for\n        elsewhere\n    */\n    [DOUBLE_WORD_KEY, 2, (17 - 1)],\n    ['tw', 3, 8],\n]\n\nexport default {\n    /**\n     * Retrieve list of words with each new word occupying its own line\n     * @param  {String} file\n     * @return {Bacon.Bus}\n     */\n    retrieve(file = DEFAULT_FILE){\n\n        // let bus = Bacon.fromPromise(getFromStorage)\n        //     .map(words => {\n        //         if (words) return {text: words};\n        //         return new Bacon.Error(\"Wordlist not found\")\n        //     })\n        //     .flatMapError(()=> {\n        //         let req = request.get(file)\n        //         return Bacon.fromNodeCallback(req.end.bind(req))\n        //     })\n        //     .map(req => req.text)\n        let req = request.get(file)\n        let bus =  Bacon.fromNodeCallback(req.end.bind(req))\n            .map(req => req.text)\n            // .flatMap(words => {\n            //     console.log(words)\n            //     let p = getFromStorage()\n            //         .then(wl => {\n            //             if (wl) return wl\n            //             return localforage\n            //                 .setItem(WORD_LIST_KEY, words)\n            //         })\n            //         .then(() => {\n            //             return words\n            //         })\n\n            //     return Bacon.fromPromise(p)\n            // })\n            .map(words => {\n                let filtered = words\n                    .split('\\n')\n\n                let wordSet = new Set(filtered)\n                return wordSet\n            })\n        return bus    \n    },\n\n    /**\n     * Takes a tile from the total list of tiles available for the game\n     * @return {Tuple.<Char, Nat>}\n     */\n    takeTile(n = 1){\n        if (!GameTiles.length) return;\n        return GameTiles.splice(0, n)\n    },\n\n    /**\n     * Retrieves a complete deck of tiles.  This will likely only be called at\n     * the start of a game\n     * @return {Array.<Tuple.<Char, Nat>>}\n     */\n    freshDeck(){\n        return this.takeTile(DECK_SIZE)\n    },\n\n    /**\n     * Creates special tiles to a board \n     * @param {Matrix} board\n     * @private\n     * @return {Matrix} BOARD_SIZE X BOARD_SIZE matrix\n     */\n    applySpecialTiles(board){\n        let tiles = new Set()\n\n        let maxIndex = BOARD_SIZE - 1\n\n        let s = (y, x) => `${y},${x}`\n        let randCoord = () => \n            [lodash.random(maxIndex), lodash.random(maxIndex)]\n\n        let specialTiles = lodash(Bonuses).map(entry => {\n                let [,, appearances] = entry\n                return lodash.fill(new Array(appearances), entry, 0, appearances) \n            })\n            .flatten()\n            .shuffle()\n            .value()\n\n        /**\n         * For Debug, should never be reached\n         * @type {Nat}\n         */\n        let max_iter = specialTiles.length * 2\n\n        return specialTiles.reduce((b, entry) => {\n            let [key, multiple] = entry\n\n            var combo;\n            var i = 0\n            do {\n                var [x, y] = randCoord()\n                combo = s(y, x)\n\n                let existing = b[y][x]\n                b[y][x] = lodash.assign({}, existing, {\n                    isSpecial: true,\n                    key,\n                    multiple\n                })\n                i++\n            } while (tiles.has(combo) || max_iter < i)\n\n            return b\n        }, board.slice())\n    },\n\n    /**\n     * Returns an empty board\n     * @return {Matrix} BOARD_SIZE X BOARD_SIZE matrix\n     */\n    getBoard(){\n        var pieces = lodash.fill(new Array(BOARD_SIZE), 1)\n            .map(() =>\n                lodash.range(BOARD_SIZE).map(() => {\n                    return {\n                        tile: null\n                    }\n                })\n            )\n\n        var midp = (BOARD_SIZE - 1) / 2\n        if (BOARD_SIZE % 2 === 0) {\n            midp = BOARD_SIZE / 2\n        }\n        let existing = pieces[midp][midp]\n\n        pieces[midp][midp] = lodash.assign(existing, {\n            isSpecial: true,\n            isCenter: true\n        })\n\n        return pieces\n    },\n\n    getEmptyBoard(){\n        var pieces = lodash.fill(new Array(BOARD_SIZE), 1)\n            .map(() => lodash.fill(new Array(BOARD_SIZE), 1))\n        return pieces\n    },\n\n    get foundWordPrototype(){\n        return {\n            word: null,\n            points: 0\n        }\n    },\n\n    /**\n     * Prototype for this game's state\n     * @return {Object}\n     */\n    get gameStatePrototype(){\n        let playerInfo = this.getPlayers()\n            .map(pd => lodash.assign(pd, {\n                foundWords: [],\n                deck: this.freshDeck()\n            }))\n\n        return {\n            board: this.applySpecialTiles(this.getBoard()),\n            playerInfo: playerInfo\n        }\n    },\n\n    /**\n     * Finds a game if it exists, otherwise creates a new one\n     * @private\n     * @return {Promise.<Error, GameState>}\n     */\n    getOrCreateGamePromise(){\n        gameStatePromise = localforage.getItem(GAME_STATE_KEY)\n            .then(s => {\n                if (s) return s\n                let gameProto = this.gameStatePrototype\n                return localforage.setItem(GAME_STATE_KEY, gameProto)\n                    .then(() => {\n                        return gameProto\n                    })\n            })\n\n        return gameStatePromise\n    },\n\n    /**\n     * Finds a game if it exists, otherwise creates a new one\n     * @return {Bacon.<GameState>}\n     */\n    getOrCreateGame(){\n        return Bacon.fromPromise(this.getOrCreateGamePromise())\n    },\n\n    /**\n     * Resets the game to its initial state, clearing all info stored in \n     * localstorage except for the word list\n     * @return {Bacon.<GameState>}\n     */\n    resetGame(){\n        let p = localforage.deleteItem(GAME_STATE_KEY)\n            .then(() => {\n                return this.getOrCreateGamePromise()\n            })\n\n        return Bacon.fromPromise(p)\n    },\n\n    /**\n     * Get possible players\n     * @return {[type]} [description]\n     */\n    getPlayers(){\n\n        let player = {\n            displayName: \"You\",\n            points: 0,\n            isHuman: true\n        }\n\n        let cpu = {\n            displayName: \"CPU\",\n            points: 0\n        }\n\n        return [player, cpu]\n    }\n}"]}